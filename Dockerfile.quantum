# Multi-stage Dockerfile for Quantum Task Planner
ARG PYTHON_VERSION=3.11

# ================================
# Stage 1: Base dependencies
# ================================
FROM python:${PYTHON_VERSION}-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    wget \
    git \
    build-essential \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd --gid 1000 quantum && \
    useradd --uid 1000 --gid quantum --shell /bin/bash --create-home quantum

# Set working directory
WORKDIR /app

# ================================
# Stage 2: Development dependencies
# ================================
FROM base as development

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt pyproject.toml ./

# Install Python dependencies with development extras
RUN pip install --upgrade pip setuptools wheel && \
    pip install -e ".[dev]"

# Copy source code
COPY . .

# Change ownership to non-root user
RUN chown -R quantum:quantum /app

# Switch to non-root user
USER quantum

# Expose ports
EXPOSE 8080 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["python", "-m", "src.openapi_doc_generator.quantum_server"]

# ================================
# Stage 3: Production base
# ================================
FROM base as production-base

# Install only production system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    tini \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt pyproject.toml ./

# Install Python dependencies (production only)
RUN pip install --upgrade pip setuptools wheel && \
    pip install . && \
    pip cache purge

# ================================
# Stage 4: Production
# ================================
FROM production-base as production

# Copy application code
COPY --chown=quantum:quantum src/ ./src/
COPY --chown=quantum:quantum scripts/ ./scripts/
COPY --chown=quantum:quantum examples/ ./examples/

# Create required directories
RUN mkdir -p /app/data /app/logs /app/cache /app/reports && \
    chown -R quantum:quantum /app

# Switch to non-root user
USER quantum

# Security: Remove unnecessary packages and clean up
USER root
RUN apt-get remove -y \
    gcc \
    g++ \
    git \
    build-essential \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch back to quantum user
USER quantum

# Set secure file permissions
RUN chmod -R 750 /app && \
    chmod -R 640 /app/src && \
    chmod +x /app/scripts/*.py

# Expose application port
EXPOSE 8080

# Health check with specific endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health/ready || exit 1

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--"]

# Production command
CMD ["python", "-m", "uvicorn", "src.openapi_doc_generator.quantum_server:app", \
     "--host", "0.0.0.0", \
     "--port", "8080", \
     "--workers", "4", \
     "--log-level", "info", \
     "--access-log", \
     "--loop", "uvloop"]

# ================================
# Stage 5: Security scanner
# ================================
FROM python:${PYTHON_VERSION}-slim as security

# Install security scanning tools
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    nmap \
    && rm -rf /var/lib/apt/lists/*

# Install Python security tools
RUN pip install --no-cache-dir \
    bandit \
    safety \
    semgrep \
    pip-audit \
    requests

# Create scanner user
RUN useradd --create-home --shell /bin/bash scanner

# Copy security scripts
COPY --chown=scanner:scanner scripts/security_scan.py /app/
COPY --chown=scanner:scanner scripts/continuous_security.py /app/

WORKDIR /app
USER scanner

# Security scanning command
CMD ["python", "continuous_security.py"]

# ================================
# Labels for metadata
# ================================
LABEL maintainer="Terragon Labs <contact@terragonlabs.com>" \
      version="1.0.0" \
      description="Quantum-inspired task planning system" \
      org.opencontainers.image.title="Quantum Task Planner" \
      org.opencontainers.image.description="Advanced quantum-inspired task planning and optimization system" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="Terragon Labs" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/danieleschmidt/quantum-inspired-task-planner" \
      org.opencontainers.image.documentation="https://docs.terragonlabs.com/quantum-planner"