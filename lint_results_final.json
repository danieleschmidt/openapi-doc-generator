B007 Loop control variable `category` not used within loop body
   --> src/openapi_doc_generator/actionable_errors.py:191:23
    |
190 |         # Match error patterns
191 |         for pattern, (category, template_key) in self.error_patterns.items():
    |                       ^^^^^^^^
192 |             match = re.search(pattern, error_message)
193 |             if match:
    |
help: Rename unused `category` to `_category`

F841 Local variable `current_time` is assigned to but never used
   --> src/openapi_doc_generator/advanced_caching.py:154:9
    |
153 |         # TTL-based cleanup
154 |         current_time = time.time()
    |         ^^^^^^^^^^^^
155 |         expired_keys = [
156 |             key for key, entry in self._cache.items()
    |
help: Remove assignment to unused variable `current_time`

E722 Do not use bare `except`
   --> src/openapi_doc_generator/advanced_concurrent_processor.py:144:13
    |
142 |                 self._condition.notify()
143 |                 return True
144 |             except:
    |             ^^^^^^
145 |                 return False
    |

B007 Loop control variable `i` not used within loop body
   --> src/openapi_doc_generator/advanced_concurrent_processor.py:736:13
    |
735 |         # Initialize worker queues
736 |         for i in range(self.num_workers):
    |             ^
737 |             self.worker_queues.append(LockFreeDeque())
    |
help: Rename unused `i` to `_i`

B026 Star-arg unpacking after a keyword argument is strongly discouraged
   --> src/openapi_doc_generator/advanced_concurrent_processor.py:849:17
    |
847 |                 priority=priority,
848 |                 partition_key=partition_key,
849 |                 *args,
    |                 ^^^^^
850 |                 **kwargs
851 |             )
    |

F841 Local variable `task` is assigned to but never used
    --> src/openapi_doc_generator/advanced_concurrent_processor.py:1009:13
     |
1007 |         # Remove from pending tasks
1008 |         if result.task_id in self.pending_tasks:
1009 |             task = self.pending_tasks[result.task_id]
     |             ^^^^
1010 |             del self.pending_tasks[result.task_id]
     |
help: Remove assignment to unused variable `task`

B007 Loop control variable `value` not used within loop body
   --> src/openapi_doc_generator/advanced_memory_optimizer.py:338:23
    |
336 |             expired_keys = []
337 |
338 |             for key, (value, timestamp, size) in self.cache.items():
    |                       ^^^^^
339 |                 if current_time - timestamp > timedelta(seconds=self.ttl_seconds):
340 |                     expired_keys.append(key)
    |
help: Rename unused `value` to `_value`

B007 Loop control variable `size` not used within loop body
   --> src/openapi_doc_generator/advanced_memory_optimizer.py:338:41
    |
336 |             expired_keys = []
337 |
338 |             for key, (value, timestamp, size) in self.cache.items():
    |                                         ^^^^
339 |                 if current_time - timestamp > timedelta(seconds=self.ttl_seconds):
340 |                     expired_keys.append(key)
    |
help: Rename unused `size` to `_size`

E722 Do not use bare `except`
   --> src/openapi_doc_generator/advanced_memory_optimizer.py:753:9
    |
751 |         try:
752 |             weakref.finalize_cache()
753 |         except:
    |         ^^^^^^
754 |             pass
    |

F841 Local variable `pool` is assigned to but never used
    --> src/openapi_doc_generator/advanced_memory_optimizer.py:1178:17
     |
1176 |             # Use object pooling if specified
1177 |             if pool_name and pool_name in optimizer.object_pools:
1178 |                 pool = optimizer.object_pools[pool_name]
     |                 ^^^^
1179 |                 # This is a simplified example - actual implementation would depend on function signature
1180 |                 result = await func(*args, **kwargs)
     |
help: Remove assignment to unused variable `pool`

F841 Local variable `optimizer` is assigned to but never used
    --> src/openapi_doc_generator/advanced_memory_optimizer.py:1192:13
     |
1191 |         def sync_wrapper(*args, **kwargs):
1192 |             optimizer = get_memory_optimizer()
     |             ^^^^^^^^^
1193 |             return func(*args, **kwargs)
     |
help: Remove assignment to unused variable `optimizer`

B007 Loop control variable `i` not used within loop body
    --> src/openapi_doc_generator/advanced_memory_optimizer.py:1243:17
     |
1242 |             # Use object pool
1243 |             for i in range(20):
     |                 ^
1244 |                 lst = list_pool.acquire()
1245 |                 lst.extend(range(100))
     |
help: Rename unused `i` to `_i`

B007 Loop control variable `callers` not used within loop body
   --> src/openapi_doc_generator/advanced_performance_analytics.py:193:65
    |
191 |         results = []
192 |
193 |         for func_key, (call_count, total_time, cumulative_time, callers) in stats.stats.items():
    |                                                                 ^^^^^^^
194 |             file_name, line_number, function_name = func_key
    |
help: Rename unused `callers` to `_callers`

B007 Loop control variable `metric_key` not used within loop body
   --> src/openapi_doc_generator/advanced_performance_analytics.py:326:13
    |
324 |         bottlenecks = []
325 |
326 |         for metric_key, metrics in self.metric_history.items():
    |             ^^^^^^^^^^
327 |             if not metrics:
328 |                 continue
    |
help: Rename unused `metric_key` to `_metric_key`

B007 Loop control variable `metric_key` not used within loop body
   --> src/openapi_doc_generator/advanced_performance_analytics.py:599:17
    |
597 |             features = []
598 |
599 |             for metric_key, metrics in self.metric_history.items():
    |                 ^^^^^^^^^^
600 |                 if len(metrics) < 20:
601 |                     continue
    |
help: Rename unused `metric_key` to `_metric_key`

F402 Import `stats` from line 38 shadowed by loop variable
   --> src/openapi_doc_generator/advanced_performance_analytics.py:868:30
    |
866 |         component_analysis = analysis['component_analysis']
867 |         for component, metrics in component_analysis.items():
868 |             for metric_name, stats in metrics.items():
    |                              ^^^^^
869 |                 if stats['trend'] == 'increasing' and 'error' in metric_name:
870 |                     recommendations.append(f"Increasing error rate in {component}. Investigate root cause.")
    |

F841 Local variable `current_time` is assigned to but never used
   --> src/openapi_doc_generator/advanced_performance_analytics.py:924:9
    |
922 |     async def _check_alert_conditions(self):
923 |         """Check for conditions that should trigger alerts."""
924 |         current_time = datetime.now()
    |         ^^^^^^^^^^^^
925 |
926 |         # Check recent metrics for alert conditions
    |
help: Remove assignment to unused variable `current_time`

B007 Loop control variable `i` not used within loop body
    --> src/openapi_doc_generator/advanced_performance_analytics.py:1133:17
     |
1132 |             # Simulate some work and record metrics
1133 |             for i in range(100):
     |                 ^
1134 |                 # Simulate varying performance
1135 |                 response_time = np.random.uniform(50, 500)  # 50-500ms
     |
help: Rename unused `i` to `_i`

F821 Undefined name `Tuple`
  --> src/openapi_doc_generator/auto_scaler.py:87:46
   |
85 |         # State tracking
86 |         self.last_scaling_actions: Dict[str, datetime] = {}
87 |         self.metrics_history: Dict[str, List[Tuple[float, float]]] = {}  # (timestamp, value)
   |                                              ^^^^^
88 |         self.scaling_history: List[ScalingAction] = []
   |

F841 Local variable `monitor_summary` is assigned to but never used
   --> src/openapi_doc_generator/auto_scaler.py:209:9
    |
208 |         # Application metrics from monitor
209 |         monitor_summary = self.monitor.get_metrics_summary()
    |         ^^^^^^^^^^^^^^^
210 |
211 |         # Calculate derived metrics
    |
help: Remove assignment to unused variable `monitor_summary`

F841 Local variable `current_value` is assigned to but never used
   --> src/openapi_doc_generator/auto_scaler.py:247:9
    |
245 |         """Evaluate a specific scaling rule."""
246 |         metric_name = rule.trigger.value
247 |         current_value = metrics.get(metric_name, 0.0)
    |         ^^^^^^^^^^^^^
248 |
249 |         # Check if we're in cooldown
    |
help: Remove assignment to unused variable `current_value`

F841 Local variable `error_handler` is assigned to but never used
   --> src/openapi_doc_generator/cli.py:695:5
    |
693 |     # Initialize enhanced monitoring and error handling
694 |     monitor = get_monitor()
695 |     error_handler = get_error_handler()
    |     ^^^^^^^^^^^^^
696 |     validator = get_validator()
    |
help: Remove assignment to unused variable `error_handler`

F841 Local variable `validator` is assigned to but never used
   --> src/openapi_doc_generator/cli.py:696:5
    |
694 |     monitor = get_monitor()
695 |     error_handler = get_error_handler()
696 |     validator = get_validator()
    |     ^^^^^^^^^
697 |
698 |     # Start monitoring if performance metrics are requested
    |
help: Remove assignment to unused variable `validator`

F841 Local variable `technical_details` is assigned to but never used
   --> src/openapi_doc_generator/enhanced_error_handling.py:98:9
    |
 96 |         recovery_suggestions = self._generate_recovery_suggestions(error, category, context)
 97 |         user_friendly_message = self._generate_user_friendly_message(error, category, context)
 98 |         technical_details = self._generate_technical_details(error, context)
    |         ^^^^^^^^^^^^^^^^^
 99 |
100 |         enhanced_error = EnhancedError(
    |
help: Remove assignment to unused variable `technical_details`

F841 Local variable `error_type` is assigned to but never used
   --> src/openapi_doc_generator/enhanced_error_handling.py:116:9
    |
114 |     def _categorize_error(self, error: Exception, context: ErrorContext) -> ErrorCategory:
115 |         """Categorize error based on type and context."""
116 |         error_type = type(error).__name__
    |         ^^^^^^^^^^
117 |
118 |         if isinstance(error, (ValueError, TypeError)) and "schema" in str(error).lower():
    |
help: Remove assignment to unused variable `error_type`

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> src/openapi_doc_generator/github_hygiene.py:46:13
   |
44 |         except urllib.error.HTTPError as e:
45 |             error_body = e.read().decode('utf-8') if e.fp else ""
46 |             raise Exception(f"GitHub API error {e.code}: {error_body}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |
48 |     def get_user_repos(self, per_page: int = 100) -> List[Dict]:
   |

B007 Loop control variable `region` not used within loop body
   --> src/openapi_doc_generator/global_distribution_optimizer.py:822:13
    |
821 |         # Predict future access patterns
822 |         for region, cache in self.edge_caches.items():
    |             ^^^^^^
823 |             await cache.predict_access_patterns()
    |
help: Rename unused `region` to `_region`

B007 Loop control variable `cache` not used within loop body
   --> src/openapi_doc_generator/global_distribution_optimizer.py:827:21
    |
825 |         # Consider content prefetching between regions
826 |         # This is a simplified implementation
827 |         for region, cache in self.edge_caches.items():
    |                     ^^^^^
828 |             if access_patterns[region]['hit_rate'] < 70:  # Low hit rate
829 |                 # Consider prefetching from high-performing regions
    |
help: Rename unused `cache` to `_cache`

B007 Loop control variable `other_cache` not used within loop body
   --> src/openapi_doc_generator/global_distribution_optimizer.py:830:35
    |
828 |             if access_patterns[region]['hit_rate'] < 70:  # Low hit rate
829 |                 # Consider prefetching from high-performing regions
830 |                 for other_region, other_cache in self.edge_caches.items():
    |                                   ^^^^^^^^^^^
831 |                     if (other_region != region and
832 |                         access_patterns[other_region]['hit_rate'] > 85):
    |
help: Rename unused `other_cache` to `_other_cache`

B007 Loop control variable `node_id` not used within loop body
   --> src/openapi_doc_generator/global_distribution_optimizer.py:839:13
    |
837 |         """Optimize edge node placement and load distribution."""
838 |         # Analyze edge node performance
839 |         for node_id, edge_node in self.edge_nodes.items():
    |             ^^^^^^^
840 |             # Update node metrics (simplified)
841 |             edge_node.current_load = np.random.uniform(0.3, 0.8)  # Simulate load
    |
help: Rename unused `node_id` to `_node_id`

B007 Loop control variable `region` not used within loop body
   --> src/openapi_doc_generator/global_distribution_optimizer.py:877:17
    |
875 |         # Propagate invalidations across regions
876 |         for invalidation in invalidations:
877 |             for region, cache in self.edge_caches.items():
    |                 ^^^^^^
878 |                 await cache.invalidate(invalidation['key'])
    |
help: Rename unused `region` to `_region`

W291 Trailing whitespace
  --> src/openapi_doc_generator/intelligent_load_balancer.py:10:48
   |
 8 | Features:
 9 | - Real-time performance metrics collection
10 | - Quantum-inspired load distribution algorithms  
   |                                                ^^
11 | - ML-based capacity planning and prediction
12 | - Dynamic health monitoring and failover
   |
help: Remove trailing whitespace

B007 Loop control variable `i` not used within loop body
   --> src/openapi_doc_generator/intelligent_load_balancer.py:525:13
    |
523 |         # Calculate quantum factors
524 |         quantum_factors = {}
525 |         for i, instance_id in enumerate(instances):
    |             ^
526 |             metrics = self.instance_metrics.get(instance_id, LoadBalancingMetrics())
    |
help: Rename unused `i` to `_i`

W293 Blank line contains whitespace
  --> src/openapi_doc_generator/ml_schema_inference.py:76:1
   |
74 |     """
75 |     Bayesian neural network for type inference with uncertainty quantification.
76 |     
   | ^^^^
77 |     Uses variational inference to provide confidence intervals and handle
78 |     the inherent uncertainty in dynamic typing scenarios.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/ml_schema_inference.py:347:1
    |
345 |     """
346 |     Meta-learning system for few-shot schema inference on unseen patterns.
347 |     
    | ^^^^
348 |     Learns to quickly adapt to new schema patterns with minimal examples
349 |     using model-agnostic meta-learning (MAML) principles.
    |
help: Remove whitespace from blank line

B007 Loop control variable `field_name` not used within loop body
   --> src/openapi_doc_generator/ml_schema_inference.py:381:17
    |
380 |         # Encode field types
381 |         for i, (field_name, prob_type) in enumerate(pattern.fields.items()):
    |                 ^^^^^^^^^^
382 |             if i < 64:
383 |                 embedding[i] = hash(prob_type.primary_type) % 1000 / 1000.0
    |
help: Rename unused `field_name` to `_field_name`

F402 Import `field` from line 21 shadowed by loop variable
   --> src/openapi_doc_generator/ml_schema_inference.py:417:17
    |
415 |         field_examples = defaultdict(list)
416 |         for example in examples:
417 |             for field, value in example.items():
    |                 ^^^^^
418 |                 field_examples[field].append(value)
    |

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/ml_schema_inference.py:474:1
    |
472 |     """
473 |     Evolutionary algorithm for predicting schema changes and evolution patterns.
474 |     
    | ^^^^
475 |     Uses genetic algorithms to model how schemas evolve over time and predict
476 |     future changes, compatibility issues, and breaking changes.
    |
help: Remove whitespace from blank line

B007 Loop control variable `generation` not used within loop body
   --> src/openapi_doc_generator/ml_schema_inference.py:497:13
    |
496 |         # Evolve population
497 |         for generation in range(generations):
    |             ^^^^^^^^^^
498 |             # Evaluate fitness
499 |             fitness_scores = [self._evaluate_fitness(individual, schema_history)
    |
help: Rename unused `generation` to `_generation`

F402 Import `field` from line 21 shadowed by loop variable
   --> src/openapi_doc_generator/ml_schema_inference.py:808:13
    |
806 |         child1, child2 = {}, {}
807 |
808 |         for field in all_fields:
    |             ^^^^^
809 |             if np.random.random() < 0.5:
810 |                 # Take from parent1
    |

F402 Import `field` from line 21 shadowed by loop variable
   --> src/openapi_doc_generator/ml_schema_inference.py:836:13
    |
835 |         # Added fields
836 |         for field in predicted_fields - current_fields:
    |             ^^^^^
837 |             predicted_changes.append({
838 |                 'type': 'field_added',
    |

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/ml_schema_inference.py:892:1
    |
890 |     """
891 |     Main ML-enhanced schema inference system that orchestrates all components.
892 |     
    | ^^^^
893 |     Combines Bayesian type inference, meta-learning, and evolutionary prediction
894 |     to provide comprehensive schema understanding and evolution analysis.
    |
help: Remove whitespace from blank line

F402 Import `field` from line 21 shadowed by loop variable
   --> src/openapi_doc_generator/ml_schema_inference.py:943:17
    |
941 |             )
942 |
943 |             for field, value in example.items():
    |                 ^^^^^
944 |                 prob_type = ProbabilisticType(
945 |                     primary_type=type(value).__name__,
    |

C401 Unnecessary generator (rewrite as a set comprehension)
   --> src/openapi_doc_generator/ml_schema_inference.py:975:35
    |
973 |             'high_confidence_fields': sum(1 for field in schema.values() if field.confidence > 0.8),
974 |             'uncertain_fields': sum(1 for field in schema.values() if field.uncertainty > 0.3),
975 |             'type_diversity': len(set(field.primary_type for field in schema.values()))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
976 |         }
    |
help: Rewrite as a set comprehension

B007 Loop control variable `i` not used within loop body
   --> src/openapi_doc_generator/parallel_processor.py:110:17
    |
108 |         """Start additional worker threads."""
109 |         with self._lock:
110 |             for i in range(count):
    |                 ^
111 |                 worker_id = f"worker_{len(self.workers) + 1}"
112 |                 worker = threading.Thread(
    |
help: Rename unused `i` to `_i`

F841 Local variable `cache` is assigned to but never used
   --> src/openapi_doc_generator/parallel_processor.py:124:9
    |
122 |     def _worker_loop(self, worker_id: str) -> None:
123 |         """Main worker loop."""
124 |         cache = get_cache()
    |         ^^^^^
125 |         circuit = get_circuit_breaker(f"worker_{worker_id}",
126 |                                      CircuitBreakerConfig(failure_threshold=5, timeout=60.0))
    |
help: Remove assignment to unused variable `cache`

F841 Local variable `processor` is assigned to but never used
   --> src/openapi_doc_generator/parallel_processor.py:368:13
    |
366 |     def decorator(func: Callable) -> Callable:
367 |         def wrapper(*args, **kwargs):
368 |             processor = get_parallel_processor(max_workers)
    |             ^^^^^^^^^
369 |
370 |             # For single operations, just execute normally
    |
help: Remove assignment to unused variable `processor`

B023 Function definition does not bind loop variable `task`
   --> src/openapi_doc_generator/performance_optimizer.py:282:65
    |
280 |                 # Run coroutine in thread
281 |                 future = loop.run_in_executor(self.thread_executor,
282 |                                             lambda: asyncio.run(task()))
    |                                                                 ^^^^
283 |             else:
284 |                 future = loop.run_in_executor(self.thread_executor, task)
    |

F841 Local variable `collected` is assigned to but never used
   --> src/openapi_doc_generator/performance_optimizer.py:378:13
    |
376 |         if self.config.enable_memory_optimization:
377 |             # Force garbage collection
378 |             collected = gc.collect()
    |             ^^^^^^^^^
379 |
380 |             # Check memory usage
    |
help: Remove assignment to unused variable `collected`

F841 Local variable `memory_info` is assigned to but never used
   --> src/openapi_doc_generator/performance_optimizer.py:526:9
    |
524 |                                     task_count: int):
525 |         """Record performance metrics for an operation."""
526 |         memory_info = psutil.virtual_memory()
    |         ^^^^^^^^^^^
527 |         process = psutil.Process()
    |
help: Remove assignment to unused variable `memory_info`

B007 Loop control variable `pattern_name` not used within loop body
   --> src/openapi_doc_generator/predictive_auto_scaler.py:907:13
    |
905 |         pattern_confidence = 0.0
906 |
907 |         for pattern_name, recommendation in pattern_recommendations.items():
    |             ^^^^^^^^^^^^
908 |             if recommendation['action'] == 'scale_up':
909 |                 pattern_scaling_needed = max(pattern_scaling_needed, 1)
    |
help: Rename unused `pattern_name` to `_pattern_name`

C416 Unnecessary dict comprehension (rewrite using `dict()`)
    --> src/openapi_doc_generator/predictive_auto_scaler.py:1162:38
     |
1160 |               'detected_patterns': patterns_detected,
1161 |               'model_accuracies': {
1162 |                   resource_type.value: {
     |  ______________________________________^
1163 | |                     model: accuracy
1164 | |                     for model, accuracy in accuracies.items()
1165 | |                 }
     | |_________________^
1166 |                   for resource_type, accuracies in self.capacity_predictor.model_accuracies.items()
1167 |               },
     |
help: Rewrite using `dict()`

E741 Ambiguous variable name: `l`
   --> src/openapi_doc_generator/quantum_global_deployment.py:175:53
    |
173 |                 "deployment_id": deployment_id,
174 |                 "target_regions": [r.value for r in deployment_config.target_regions],
175 |                 "supported_languages": [l.value for l in deployment_config.supported_languages]
    |                                                     ^
176 |             }
177 |         )
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:213:13
    |
211 |           except Exception as e:
212 |               logger.error(f"Failed to initialize hybrid orchestration: {e}")
213 | /             raise QuantumSDLCException(
214 | |                 f"Hybrid orchestration initialization failed: {e}",
215 | |                 QuantumSDLCCapability.HYBRID_ORCHESTRATION,
216 | |                 "INIT_001"
217 | |             )
    | |_____________^
218 |
219 |       async def execute(self, request: Dict[str, Any]) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:251:13
    |
249 |           except Exception as e:
250 |               logger.error(f"Hybrid orchestration execution failed: {e}")
251 | /             raise QuantumSDLCException(
252 | |                 f"Hybrid orchestration execution failed: {e}",
253 | |                 QuantumSDLCCapability.HYBRID_ORCHESTRATION,
254 | |                 "EXEC_002"
255 | |             )
    | |_____________^
256 |
257 |       async def get_health_status(self) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:324:13
    |
322 |           except Exception as e:
323 |               logger.error(f"Failed to initialize anomaly detection: {e}")
324 | /             raise QuantumSDLCException(
325 | |                 f"Anomaly detection initialization failed: {e}",
326 | |                 QuantumSDLCCapability.ML_ANOMALY_DETECTION,
327 | |                 "INIT_002"
328 | |             )
    | |_____________^
329 |
330 |       async def execute(self, request: Dict[str, Any]) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:385:13
    |
383 |                   raise
384 |               logger.error(f"Anomaly detection execution failed: {e}")
385 | /             raise QuantumSDLCException(
386 | |                 f"Anomaly detection execution failed: {e}",
387 | |                 QuantumSDLCCapability.ML_ANOMALY_DETECTION,
388 | |                 "EXEC_006"
389 | |             )
    | |_____________^
390 |
391 |       async def get_health_status(self) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:461:13
    |
459 |           except Exception as e:
460 |               logger.error(f"Failed to initialize biological evolution: {e}")
461 | /             raise QuantumSDLCException(
462 | |                 f"Biological evolution initialization failed: {e}",
463 | |                 QuantumSDLCCapability.BIOLOGICAL_EVOLUTION,
464 | |                 "INIT_003"
465 | |             )
    | |_____________^
466 |
467 |       async def execute(self, request: Dict[str, Any]) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:521:13
    |
519 |                   raise
520 |               logger.error(f"Biological evolution execution failed: {e}")
521 | /             raise QuantumSDLCException(
522 | |                 f"Biological evolution execution failed: {e}",
523 | |                 QuantumSDLCCapability.BIOLOGICAL_EVOLUTION,
524 | |                 "EXEC_010"
525 | |             )
    | |_____________^
526 |
527 |       async def get_health_status(self) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:593:13
    |
591 |           except Exception as e:
592 |               logger.error(f"Failed to initialize benchmarking: {e}")
593 | /             raise QuantumSDLCException(
594 | |                 f"Benchmarking initialization failed: {e}",
595 | |                 QuantumSDLCCapability.PERFORMANCE_BENCHMARKING,
596 | |                 "INIT_004"
597 | |             )
    | |_____________^
598 |
599 |       async def execute(self, request: Dict[str, Any]) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:650:13
    |
648 |                   raise
649 |               logger.error(f"Benchmarking execution failed: {e}")
650 | /             raise QuantumSDLCException(
651 | |                 f"Benchmarking execution failed: {e}",
652 | |                 QuantumSDLCCapability.PERFORMANCE_BENCHMARKING,
653 | |                 "EXEC_014"
654 | |             )
    | |_____________^
655 |
656 |       async def get_health_status(self) -> Dict[str, Any]:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:797:13
    |
795 |             capability_enum = QuantumSDLCCapability(capability)
796 |         except ValueError:
797 |             raise QuantumSDLCException(f"Unknown capability: {capability}", error_code="REQ_002")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
798 |
799 |         if capability_enum not in self.capabilities:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:856:13
    |
854 |             )
855 |             await self._handle_operation_error(operation_id, error)
856 |             raise error
    |             ^^^^^^^^^^^
857 |
858 |         except Exception as e:
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_innovation_integration.py:869:17
    |
867 |                 error = QuantumSDLCException(f"Operation execution failed: {e}", capability_enum, "EXEC_GENERAL")
868 |                 await self._handle_operation_error(operation_id, error)
869 |                 raise error
    |                 ^^^^^^^^^^^
870 |
871 |         finally:
    |

F841 Local variable `current_size_mb` is assigned to but never used
   --> src/openapi_doc_generator/quantum_intelligent_cache.py:207:9
    |
205 |     def _should_evict(self, new_size: int) -> bool:
206 |         """Determine if eviction is needed."""
207 |         current_size_mb = self.stats.size_bytes / (1024 * 1024)
    |         ^^^^^^^^^^^^^^^
208 |         new_total_mb = (self.stats.size_bytes + new_size) / (1024 * 1024)
    |
help: Remove assignment to unused variable `current_size_mb`

F841 Local variable `current_time` is assigned to but never used
   --> src/openapi_doc_generator/quantum_intelligent_cache.py:343:9
    |
341 |         """Update quantum entanglement between related cache entries."""
342 |         # Find potentially entangled keys (similar patterns, recent access)
343 |         current_time = time.time()
    |         ^^^^^^^^^^^^
344 |
345 |         for other_key, other_entry in self.entries.items():
    |
help: Remove assignment to unused variable `current_time`

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:128:1
    |
126 |         """
127 |         Select optimal worker using quantum-enhanced algorithm.
128 |         
    | ^^^^^^^^
129 |         Uses quantum superposition to evaluate all workers simultaneously
130 |         and quantum interference to select the best option.
    |
help: Remove whitespace from blank line

F841 Local variable `recent_decisions` is assigned to but never used
   --> src/openapi_doc_generator/quantum_optimization_engine.py:500:9
    |
498 |         # Simplified accuracy calculation
499 |         # In practice, this would track whether scaling decisions improved performance
500 |         recent_decisions = self.scaling_history[-10:]
    |         ^^^^^^^^^^^^^^^^
501 |
502 |         # Assume 80% accuracy for now
    |
help: Remove assignment to unused variable `recent_decisions`

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:633:1
    |
631 |         """
632 |         Submit task for distributed quantum processing.
633 |         
    | ^^^^^^^^
634 |         Args:
635 |             operation: Name of the operation
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:640:1
    |
638 |             estimated_duration: Estimated execution time in seconds
639 |             quantum_complexity: Quantum complexity factor (0-10)
640 |             
    | ^^^^^^^^^^^^
641 |         Returns:
642 |             Task ID for tracking
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:669:1
    |
667 |         """
668 |         Process pending tasks and return results.
669 |         
    | ^^^^^^^^
670 |         Args:
671 |             timeout: Maximum time to wait for results
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:672:1
    |
670 |         Args:
671 |             timeout: Maximum time to wait for results
672 |             
    | ^^^^^^^^^^^^
673 |         Returns:
674 |             List of (task_id, result) tuples
    |
help: Remove whitespace from blank line

F841 Local variable `worker_id` is assigned to but never used
   --> src/openapi_doc_generator/quantum_optimization_engine.py:687:17
    |
686 |                 # Select optimal worker using quantum load balancer
687 |                 worker_id = self.load_balancer.select_optimal_worker(task)
    |                 ^^^^^^^^^
688 |
689 |                 # Submit to worker pool
    |
help: Remove assignment to unused variable `worker_id`

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:901:1
    |
899 |         """
900 |         Execute operation with full quantum optimization.
901 |         
    | ^^^^^^^^
902 |         Args:
903 |             operation_name: Name for tracking and optimization
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_optimization_engine.py:906:1
    |
904 |             func: Function to execute
905 |             optimization_level: 0=basic, 1=moderate, 2=aggressive, 3=experimental
906 |             
    | ^^^^^^^^^^^^
907 |         Returns:
908 |             Optimized operation result
    |
help: Remove whitespace from blank line

B026 Star-arg unpacking after a keyword argument is strongly discouraged
   --> src/openapi_doc_generator/quantum_optimization_engine.py:985:13
    |
983 |             estimated_duration=duration,
984 |             quantum_complexity=complexity,
985 |             *args,
    |             ^^^^^
986 |             **kwargs
987 |         )
    |

E722 Do not use bare `except`
    --> src/openapi_doc_generator/quantum_optimization_engine.py:1073:9
     |
1071 |             if result_size > 1000000:  # 1MB string representation
1072 |                 return False
1073 |         except:
     |         ^^^^^^
1074 |             pass
     |

W293 Blank line contains whitespace
    --> src/openapi_doc_generator/quantum_optimization_engine.py:1165:1
     |
1163 |     """
1164 |     Decorator for quantum-optimized function execution.
1165 |     
     | ^^^^
1166 |     Args:
1167 |         operation_name: Name for optimization tracking
     |
help: Remove whitespace from blank line

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_optimizer.py:628:21
    |
626 |                 except concurrent.futures.TimeoutError:
627 |                     logger.error(f"Operation {func.__name__} timed out after {timeout_seconds}s")
628 |                     raise TimeoutError(f"Quantum operation timed out after {timeout_seconds} seconds")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
629 |
630 |         return wrapper
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_resilience_engine.py:417:17
    |
415 |                 return future.result(timeout=config.timeout_seconds)
416 |             except FuturesTimeout:
417 |                 raise TimeoutError(f"Operation {operation_name} timed out after {config.timeout_seconds}s")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
418 |
419 |     def _execute_with_fallback(self,
    |

W293 Blank line contains whitespace
  --> src/openapi_doc_generator/quantum_semantic_analyzer.py:81:1
   |
79 |         """
80 |         Encode AST node into quantum-enhanced semantic features.
81 |         
   | ^^^^^^^^
82 |         Uses quantum superposition to represent multiple semantic meanings
83 |         simultaneously, enabling more nuanced code understanding.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/quantum_semantic_analyzer.py:478:1
    |
476 |     """
477 |     Main interface for quantum-enhanced semantic analysis of code.
478 |     
    | ^^^^
479 |     This class orchestrates the quantum feature encoding and graph neural network
480 |     analysis to provide comprehensive semantic understanding of API code.
    |
help: Remove whitespace from blank line

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:191:83
    |
191 | async def rate_limit_check(request: Request, security: QuantumSecurityValidator = Depends(get_security)):
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^
192 |     """Rate limiting middleware."""
193 |     if os.getenv('ENABLE_RATE_LIMITING', 'true').lower() != 'true':
    |

F821 Undefined name `Response`
   --> src/openapi_doc_generator/quantum_server.py:266:12
    |
264 |         SECURITY_SCORE.set(85.0)
265 |
266 |     return Response(generate_latest(), media_type="text/plain")
    |            ^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:273:30
    |
271 | async def create_session(
272 |     request: CreateSessionRequest,
273 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
274 |     compliance: QuantumComplianceManager = Depends(get_compliance),
275 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:274:44
    |
272 |     request: CreateSessionRequest,
273 |     api: QuantumPlannerAPI = Depends(get_api),
274 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
275 |     _: None = Depends(rate_limit_check)
276 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:299:9
    |
297 |     except Exception as e:
298 |         logger.error(f"Failed to create session: {str(e)}")
299 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:304:30
    |
302 | @app.get("/api/v1/sessions")
303 | async def list_sessions(
304 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
305 |     _: None = Depends(rate_limit_check)
306 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:314:30
    |
312 | async def get_session_status(
313 |     session_id: str,
314 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
315 |     _: None = Depends(rate_limit_check)
316 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:324:30
    |
322 | async def delete_session(
323 |     session_id: str,
324 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
325 |     compliance: QuantumComplianceManager = Depends(get_compliance),
326 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:325:44
    |
323 |     session_id: str,
324 |     api: QuantumPlannerAPI = Depends(get_api),
325 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
326 |     _: None = Depends(rate_limit_check)
327 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:345:30
    |
343 |     session_id: str,
344 |     request: AddTaskRequest,
345 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
346 |     compliance: QuantumComplianceManager = Depends(get_compliance),
347 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:346:44
    |
344 |     request: AddTaskRequest,
345 |     api: QuantumPlannerAPI = Depends(get_api),
346 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
347 |     _: None = Depends(rate_limit_check)
348 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:365:9
    |
363 |     except Exception as e:
364 |         logger.error(f"Failed to add task: {str(e)}")
365 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:371:30
    |
369 | async def add_sdlc_tasks(
370 |     session_id: str,
371 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
372 |     compliance: QuantumComplianceManager = Depends(get_compliance),
373 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:372:44
    |
370 |     session_id: str,
371 |     api: QuantumPlannerAPI = Depends(get_api),
372 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
373 |     _: None = Depends(rate_limit_check)
374 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:393:30
    |
391 |     session_id: str,
392 |     background_tasks: BackgroundTasks,
393 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
394 |     compliance: QuantumComplianceManager = Depends(get_compliance),
395 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:394:44
    |
392 |     background_tasks: BackgroundTasks,
393 |     api: QuantumPlannerAPI = Depends(get_api),
394 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
395 |     _: None = Depends(rate_limit_check)
396 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:417:9
    |
415 |     except Exception as e:
416 |         logger.error(f"Failed to create plan: {str(e)}")
417 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:424:30
    |
422 |     session_id: str,
423 |     request: ExportPlanRequest,
424 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
425 |     compliance: QuantumComplianceManager = Depends(get_compliance),
426 |     _: None = Depends(rate_limit_check)
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:425:44
    |
423 |     request: ExportPlanRequest,
424 |     api: QuantumPlannerAPI = Depends(get_api),
425 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
426 |     _: None = Depends(rate_limit_check)
427 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:447:9
    |
445 |     except Exception as e:
446 |         logger.error(f"Failed to export plan: {str(e)}")
447 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:454:44
    |
452 | async def record_consent(
453 |     request: ConsentRequest,
454 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
455 |     _: None = Depends(rate_limit_check)
456 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:471:9
    |
469 |     except Exception as e:
470 |         logger.error(f"Failed to record consent: {str(e)}")
471 |         raise HTTPException(status_code=500, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:478:44
    |
476 |     user_id: str,
477 |     consent_id: str,
478 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
479 |     _: None = Depends(rate_limit_check)
480 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:492:44
    |
490 | @app.get("/api/v1/compliance/audit")
491 | async def run_compliance_audit(
492 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
493 |     _: None = Depends(rate_limit_check)
494 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:501:44
    |
499 | @app.get("/api/v1/compliance/dashboard")
500 | async def get_compliance_dashboard(
501 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
502 |     _: None = Depends(rate_limit_check)
503 | ):
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:511:44
    |
509 | async def export_user_data(
510 |     user_id: str,
511 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
512 |     _: None = Depends(rate_limit_check)
513 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:518:9
    |
516 |         return compliance.export_user_data(user_id)
517 |     except ValueError as e:
518 |         raise HTTPException(status_code=400, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:524:44
    |
522 | async def delete_user_data(
523 |     user_id: str,
524 |     compliance: QuantumComplianceManager = Depends(get_compliance),
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^
525 |     _: None = Depends(rate_limit_check)
526 | ):
    |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/quantum_server.py:531:9
    |
529 |         return compliance.delete_user_data(user_id)
530 |     except ValueError as e:
531 |         raise HTTPException(status_code=400, detail=str(e))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   --> src/openapi_doc_generator/quantum_server.py:538:30
    |
536 | async def get_security_report(
537 |     session_id: str,
538 |     api: QuantumPlannerAPI = Depends(get_api),
    |                              ^^^^^^^^^^^^^^^^
539 |     _: None = Depends(rate_limit_check)
540 | ):
    |

W293 Blank line contains whitespace
  --> src/openapi_doc_generator/research_benchmark_suite.py:74:1
   |
72 |     """
73 |     Generate high-quality ground truth data for benchmarking.
74 |     
   | ^^^^
75 |     Creates carefully curated datasets with known-correct schemas and
76 |     semantic annotations for rigorous experimental validation.
   |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:223:1
    |
221 |     if user_id <= 0:
222 |         raise HTTPException(status_code=404, detail="User not found")
223 |     
    | ^^^^
224 |     return User(
225 |         id=user_id,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:253:1
    |
251 | class User(Base):
252 |     __tablename__ = "users"
253 |     
    | ^^^^
254 |     id = Column(Integer, primary_key=True, index=True)
255 |     username = Column(String, unique=True, index=True)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:269:1
    |
267 |     is_active: bool
268 |     profile: Optional[Dict[str, Any]] = None
269 |     
    | ^^^^
270 |     class Config:
271 |         orm_mode = True
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:278:1
    |
276 |     password: str = Field(..., min_length=8)
277 |     role: Optional[UserRole] = UserRole.USER
278 |     
    | ^^^^
279 |     @validator('username')
280 |     def username_alphanumeric(cls, v):
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:310:1
    |
308 |     total = 100
309 |     pages = (total + size - 1) // size
310 |     
    | ^^^^
311 |     users = []
312 |     for i in range((page - 1) * size, min(page * size, total)):
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:322:1
    |
320 |             profile={"bio": f"Bio for user {i}", "location": "Earth"}
321 |         ))
322 |     
    | ^^^^
323 |     return PaginatedResponse(
324 |         items=users,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:340:1
    |
338 |     if current_user.role != UserRole.ADMIN:
339 |         raise HTTPException(status_code=403, detail="Insufficient permissions")
340 |     
    | ^^^^
341 |     new_user = UserResponse(
342 |         id=999,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:349:1
    |
347 |         is_active=True
348 |     )
349 |     
    | ^^^^
350 |     background_tasks.add_task(send_welcome_email, user.email)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:351:1
    |
350 |     background_tasks.add_task(send_welcome_email, user.email)
351 |     
    | ^^^^
352 |     return new_user
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:387:1
    |
385 |     timestamp: datetime = Field(default_factory=datetime.utcnow)
386 |     version: int = 1
387 |     
    | ^^^^
388 |     @abstractmethod
389 |     def get_event_type(self) -> str:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:396:1
    |
394 |     username: str
395 |     email: str
396 |     
    | ^^^^
397 |     def get_event_type(self) -> str:
398 |         return "user.created"
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:402:1
    |
400 | class Repository(Generic[T], ABC):
401 |     \"\"\"Generic repository pattern.\"\"\"
402 |     
    | ^^^^
403 |     @abstractmethod
404 |     async def get_by_id(self, id: int) -> Optional[T]:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:406:1
    |
404 |     async def get_by_id(self, id: int) -> Optional[T]:
405 |         pass
406 |     
    | ^^^^
407 |     @abstractmethod
408 |     async def create(self, entity: T) -> T:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:410:1
    |
408 |     async def create(self, entity: T) -> T:
409 |         pass
410 |     
    | ^^^^
411 |     @abstractmethod
412 |     async def update(self, entity: T) -> T:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:414:1
    |
412 |     async def update(self, entity: T) -> T:
413 |         pass
414 |     
    | ^^^^
415 |     @abstractmethod
416 |     async def delete(self, id: int) -> bool:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:421:1
    |
419 | class EventBus:
420 |     \"\"\"Event bus for domain events.\"\"\"
421 |     
    | ^^^^
422 |     def __init__(self):
423 |         self._handlers: Dict[str, List[Callable]] = defaultdict(list)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:424:1
    |
422 |     def __init__(self):
423 |         self._handlers: Dict[str, List[Callable]] = defaultdict(list)
424 |     
    | ^^^^
425 |     def subscribe(self, event_type: str, handler: Callable):
426 |         self._handlers[event_type].append(handler)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:427:1
    |
425 |     def subscribe(self, event_type: str, handler: Callable):
426 |         self._handlers[event_type].append(handler)
427 |     
    | ^^^^
428 |     async def publish(self, event: BaseEvent):
429 |         event_type = event.get_event_type()
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:435:1
    |
433 | class CacheService:
434 |     \"\"\"Redis-based caching service.\"\"\"
435 |     
    | ^^^^
436 |     def __init__(self, redis_client: redis.Redis):
437 |         self.redis = redis_client
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:438:1
    |
436 |     def __init__(self, redis_client: redis.Redis):
437 |         self.redis = redis_client
438 |     
    | ^^^^
439 |     async def get(self, key: str) -> Optional[Any]:
440 |         value = await self.redis.get(key)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:442:1
    |
440 |         value = await self.redis.get(key)
441 |         return json.loads(value) if value else None
442 |     
    | ^^^^
443 |     async def set(self, key: str, value: Any, ttl: int = 3600):
444 |         await self.redis.set(key, json.dumps(value), ex=ttl)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:445:1
    |
443 |     async def set(self, key: str, value: Any, ttl: int = 3600):
444 |         await self.redis.set(key, json.dumps(value), ex=ttl)
445 |     
    | ^^^^
446 |     async def delete(self, key: str):
447 |         await self.redis.delete(key)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:451:1
    |
449 | class WebSocketManager:
450 |     \"\"\"WebSocket connection manager.\"\"\"
451 |     
    | ^^^^
452 |     def __init__(self):
453 |         self.active_connections: List[WebSocket] = []
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:454:1
    |
452 |     def __init__(self):
453 |         self.active_connections: List[WebSocket] = []
454 |     
    | ^^^^
455 |     async def connect(self, websocket: WebSocket):
456 |         await websocket.accept()
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:458:1
    |
456 |         await websocket.accept()
457 |         self.active_connections.append(websocket)
458 |     
    | ^^^^
459 |     def disconnect(self, websocket: WebSocket):
460 |         self.active_connections.remove(websocket)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:461:1
    |
459 |     def disconnect(self, websocket: WebSocket):
460 |         self.active_connections.remove(websocket)
461 |     
    | ^^^^
462 |     async def broadcast(self, message: dict):
463 |         for connection in self.active_connections:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:478:1
    |
476 |     updated_at: Optional[datetime] = None
477 |     version: int = 1
478 |     
    | ^^^^
479 |     @root_validator
480 |     def validate_user_data(cls, values):
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:483:1
    |
481 |         username = values.get('username')
482 |         email = values.get('email')
483 |         
    | ^^^^^^^^
484 |         if username and email and username.lower() in email.lower():
485 |             raise ValueError('Username cannot be part of email')
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:486:1
    |
484 |         if username and email and username.lower() in email.lower():
485 |             raise ValueError('Username cannot be part of email')
486 |         
    | ^^^^^^^^
487 |         return values
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:488:1
    |
487 |         return values
488 |     
    | ^^^^
489 |     @validator('permissions')
490 |     def validate_permissions(cls, v):
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:495:1
    |
493 |             'admin.read', 'admin.write', 'admin.delete'
494 |         }
495 |         
    | ^^^^^^^^
496 |         for perm in v:
497 |             if perm not in valid_permissions:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:499:1
    |
497 |             if perm not in valid_permissions:
498 |                 raise ValueError(f'Invalid permission: {perm}')
499 |         
    | ^^^^^^^^
500 |         return v
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:501:1
    |
500 |         return v
501 |     
    | ^^^^
502 |     def can_perform_action(self, action: str) -> bool:
503 |         \"\"\"Check if user can perform specific action.\"\"\"
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:505:1
    |
503 |         \"\"\"Check if user can perform specific action.\"\"\"
504 |         return action in self.permissions or 'admin.write' in self.permissions
505 |     
    | ^^^^
506 |     def add_permission(self, permission: str):
507 |         \"\"\"Add permission to user.\"\"\"
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:521:1
    |
519 |     app.state.event_bus = EventBus()
520 |     app.state.ws_manager = WebSocketManager()
521 |     
    | ^^^^
522 |     yield
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:523:1
    |
522 |     yield
523 |     
    | ^^^^
524 |     # Shutdown
525 |     await app.state.redis.close()
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:543:1
    |
541 |     \"\"\"Advanced authentication with caching.\"\"\"
542 |     token = credentials.credentials
543 |     
    | ^^^^
544 |     # Check cache first
545 |     cached_user = await cache.get(f"user:{token}")
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:548:1
    |
546 |     if cached_user:
547 |         return UserAggregate(**cached_user)
548 |     
    | ^^^^
549 |     # Mock token validation
550 |     user = UserAggregate(
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:557:1
    |
555 |         created_at=datetime.utcnow()
556 |     )
557 |     
    | ^^^^
558 |     # Cache user for 1 hour
559 |     await cache.set(f"user:{token}", user.dict(), ttl=3600)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:560:1
    |
558 |     # Cache user for 1 hour
559 |     await cache.set(f"user:{token}", user.dict(), ttl=3600)
560 |     
    | ^^^^
561 |     return user
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:568:1
    |
566 |     manager = app.state.ws_manager
567 |     await manager.connect(websocket)
568 |     
    | ^^^^
569 |     try:
570 |         while True:
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:573:1
    |
571 |             data = await websocket.receive_text()
572 |             message = json.loads(data)
573 |             
    | ^^^^^^^^^^^^
574 |             # Echo message to all connected clients
575 |             await manager.broadcast({
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:580:1
    |
578 |                 "timestamp": datetime.utcnow().isoformat()
579 |             })
580 |     
    | ^^^^
581 |     except WebSocketDisconnect:
582 |         manager.disconnect(websocket)
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:597:1
    |
595 |     if not current_user.can_perform_action("user.read"):
596 |         raise HTTPException(status_code=403, detail="Insufficient permissions")
597 |     
    | ^^^^
598 |     # Complex search logic would go here
599 |     # This is a mock implementation
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:600:1
    |
598 |     # Complex search logic would go here
599 |     # This is a mock implementation
600 |     
    | ^^^^
601 |     results = []
602 |     for i in range(size):
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:611:1
    |
609 |         )
610 |         results.append(user.dict())
611 |     
    | ^^^^
612 |     return {
613 |         "results": results,
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:719:1
    |
717 |     """
718 |     Statistical validation framework for experimental results.
719 |     
    | ^^^^
720 |     Implements rigorous statistical tests to validate the significance
721 |     of improvements and ensure reproducible research results.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/research_benchmark_suite.py:872:1
    |
870 |     """
871 |     Comprehensive performance benchmarking framework.
872 |     
    | ^^^^
873 |     Measures execution time, memory usage, accuracy, and other metrics
874 |     across different methods and datasets with statistical validation.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
    --> src/openapi_doc_generator/research_benchmark_suite.py:1067:1
     |
1065 |     """
1066 |     Main research benchmark suite orchestrating all components.
1067 |     
     | ^^^^
1068 |     Provides comprehensive benchmarking capabilities for quantum semantic analysis,
1069 |     ML schema inference, and traditional methods with statistical validation.
     |
help: Remove whitespace from blank line

F821 Undefined name `datetime`
    --> src/openapi_doc_generator/research_benchmark_suite.py:1175:30
     |
1173 |         report = {
1174 |             'experiment_metadata': {
1175 |                 'timestamp': datetime.utcnow().isoformat(),
     |                              ^^^^^^^^
1176 |                 'datasets': {k: {
1177 |                     'size': len(v.file_paths),
     |

B007 Loop control variable `dataset_id` not used within loop body
    --> src/openapi_doc_generator/research_benchmark_suite.py:1194:17
     |
1192 |             method_times = []
1193 |
1194 |             for dataset_id, dataset_results in all_results.items():
     |                 ^^^^^^^^^^
1195 |                 if method_name in dataset_results:
1196 |                     result = dataset_results[method_name]
     |
help: Rename unused `dataset_id` to `_dataset_id`

B007 Loop control variable `method_name` not used within loop body
    --> src/openapi_doc_generator/research_benchmark_suite.py:1235:17
     |
1233 |         significant_improvements = 0
1234 |         for dataset_results in all_results.values():
1235 |             for method_name, result in dataset_results.items():
     |                 ^^^^^^^^^^^
1236 |                 if result.statistical_significance < 0.05:
1237 |                     significant_improvements += 1
     |
help: Rename unused `method_name` to `_method_name`

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/openapi_doc_generator/resilient_circuit_breaker.py:121:13
    |
119 |         except asyncio.TimeoutError:
120 |             self._record_timeout(time.time() - start_time)
121 |             raise TimeoutError(f"Function {func.__name__} timed out after {self.config.timeout}s")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |         except Exception as e:
123 |             self._record_failure(time.time() - start_time, e)
    |

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:106:1
    |
104 |     """
105 |     Circuit breaker pattern implementation for fault tolerance.
106 |     
    | ^^^^
107 |     Prevents cascading failures by monitoring operation success/failure rates
108 |     and temporarily blocking requests when failure threshold is exceeded.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:180:1
    |
178 |     """
179 |     Graceful degradation manager for handling component failures.
180 |     
    | ^^^^
181 |     Provides fallback mechanisms when advanced features (quantum, ML) fail,
182 |     ensuring basic functionality continues to work.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:200:1
    |
198 |         """
199 |         Execute operation with fallback capability.
200 |         
    | ^^^^^^^^
201 |         Returns:
202 |             Tuple of (result, is_degraded) where is_degraded indicates
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:241:1
    |
239 |     """
240 |     Comprehensive input validation and sanitization.
241 |     
    | ^^^^
242 |     Validates inputs to quantum and ML operations to prevent errors
243 |     and security issues from malformed or malicious inputs.
    |
help: Remove whitespace from blank line

B028 No explicit `stacklevel` keyword argument found
   --> src/openapi_doc_generator/resilient_research_framework.py:293:13
    |
291 |         # Check for reasonable value ranges
292 |         if np.max(np.abs(embedding)) > 1000:
293 |             warnings.warn("Embedding values are very large, may cause numerical issues")
    |             ^^^^^^^^^^^^^
294 |
295 |         return True
    |
help: Set `stacklevel=2`

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:354:1
    |
352 |     """
353 |     Performance monitoring and alerting system.
354 |     
    | ^^^^
355 |     Tracks operation performance, memory usage, and provides
356 |     alerts when performance degrades beyond acceptable thresholds.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:485:1
    |
483 |     """
484 |     Configurable retry mechanism with exponential backoff.
485 |     
    | ^^^^
486 |     Provides intelligent retry logic for transient failures with
487 |     exponential backoff and jitter to prevent thundering herd issues.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:543:1
    |
541 |     """
542 |     Comprehensive error recovery and health management system.
543 |     
    | ^^^^
544 |     Coordinates circuit breakers, graceful degradation, and recovery
545 |     mechanisms to maintain system health under various failure conditions.
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:597:1
    |
595 |         """
596 |         Execute operation with full resilience features.
597 |         
    | ^^^^^^^^
598 |         Args:
599 |             operation_name: Name of the operation for tracking
    |
help: Remove whitespace from blank line

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:604:1
    |
602 |             use_retry: Enable retry mechanism
603 |             use_fallback: Enable graceful degradation
604 |             
    | ^^^^^^^^^^^^
605 |         Returns:
606 |             Tuple of (result, metadata) where metadata contains execution info
    |
help: Remove whitespace from blank line

F841 Local variable `perf_metrics` is assigned to but never used
   --> src/openapi_doc_generator/resilient_research_framework.py:618:76
    |
616 |         }
617 |
618 |         with self.performance_monitor.monitor_operation(operation_name) as perf_metrics:
    |                                                                            ^^^^^^^^^^^^
619 |             try:
620 |                 # Apply circuit breaker if requested
    |
help: Remove assignment to unused variable `perf_metrics`

W293 Blank line contains whitespace
   --> src/openapi_doc_generator/resilient_research_framework.py:845:1
    |
843 |     """
844 |     Decorator for making operations resilient with full error handling.
845 |     
    | ^^^^
846 |     Args:
847 |         operation_name: Name for tracking and monitoring
    |
help: Remove whitespace from blank line

F841 Local variable `db_pool` is assigned to but never used
    --> src/openapi_doc_generator/resource_pool_optimizer.py:1084:5
     |
1083 |     # Create pool
1084 |     db_pool = manager.create_pool(config)
     |     ^^^^^^^
1085 |
1086 |     # Start manager
     |
help: Remove assignment to unused variable `db_pool`

W291 Trailing whitespace
  --> src/openapi_doc_generator/scalability_integration.py:11:79
   |
 9 | Integration Components:
10 | 1. Intelligent Load Balancing - Real-time metrics and quantum-inspired distribution
11 | 2. Predictive Auto-Scaling - ML-based capacity planning and preemptive scaling  
   |                                                                               ^^
12 | 3. Resource Pool Optimization - Advanced connection pooling and management
13 | 4. Cross-Region Distribution - Global deployment with edge caching
   |
help: Remove trailing whitespace

F841 Local variable `lb_stats` is assigned to but never used
   --> src/openapi_doc_generator/scalability_integration.py:390:21
    |
388 |                 if self.load_balancer and self.auto_scaler:
389 |                     # Get load balancer statistics
390 |                     lb_stats = self.load_balancer.get_load_balancing_stats()
    |                     ^^^^^^^^
391 |
392 |                     # Get auto-scaler prediction
    |
help: Remove assignment to unused variable `lb_stats`

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> src/openapi_doc_generator/security_enhanced_validation.py:81:13
   |
79 |             path = Path(file_path).resolve()
80 |         except Exception:
81 |             raise SecurityValidationError(f"Invalid file path: {file_path}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |
83 |         # Check for path traversal attempts
   |

Found 182 errors.
No fixes available (117 hidden fixes can be enabled with the `--unsafe-fixes` option).
