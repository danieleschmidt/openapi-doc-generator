# Advanced Release Automation Template
# Place this file as .github/workflows/release.yml

name: Release Automation & Publishing

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
  packages: write
  id-token: write  # For OIDC authentication

jobs:
  # Version Management
  version-bump:
    name: Version Bump & Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Bump version
        id: bump
        run: |
          bump2version ${{ github.event.inputs.version_type }} --verbose
          NEW_VERSION=$(python scripts/get_version.py)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          git push origin main --tags

  # Pre-release Validation
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && !cancelled()
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run comprehensive test suite
        run: |
          make test-all
          make security-scan
          make benchmark
      
      - name: Validate package build
        run: |
          python -m build
          python -m twine check dist/*
      
      - name: Test installation
        run: |
          pip install dist/*.whl
          python -c "import openapi_doc_generator; print('Package installed successfully')"

  # Multi-Platform Build
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [pre-release-validation]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Verify build
        run: python -m twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist/

  # Container Image Build & Publish
  build-container:
    name: Build & Publish Container
    runs-on: ubuntu-latest
    needs: [pre-release-validation]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # PyPI Publishing
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    environment: release
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-ubuntu-latest
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use OIDC for secure publishing
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: https://upload.pypi.org/legacy/

  # GitHub Release Creation
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, build-container]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install openapi-doc-generator==${{ github.ref_name }}
            ```
            
            ## Docker
            
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.last_tag }}...${{ github.ref_name }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          artifacts: "artifacts/**/*"
          generateReleaseNotes: true

  # Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-github-release]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Update documentation
        run: |
          # Trigger documentation update workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/docs.yml/dispatches" \
            -d '{"ref":"main"}'
      
      - name: Notify stakeholders
        run: |
          echo "::notice::Release ${{ github.ref_name }} published successfully"
          # Add additional notification logic here (Slack, email, etc.)

# Security and Compliance
  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-container]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.ref_name }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'