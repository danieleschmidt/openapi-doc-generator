version: '3.8'

services:
  # Main Quantum Task Planner API
  quantum-api:
    build:
      context: .
      dockerfile: Dockerfile.quantum
      target: production
    container_name: quantum-task-planner
    restart: unless-stopped
    ports:
      - "${QUANTUM_API_PORT:-8080}:8080"
    environment:
      # Application settings
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      - DEBUG=false
      
      # Quantum planner configuration
      - QUANTUM_TEMPERATURE=${QUANTUM_TEMPERATURE:-2.0}
      - QUANTUM_COOLING_RATE=${QUANTUM_COOLING_RATE:-0.95}
      - QUANTUM_RESOURCES=${QUANTUM_RESOURCES:-4}
      - QUANTUM_VALIDATION_LEVEL=${QUANTUM_VALIDATION_LEVEL:-moderate}
      - QUANTUM_SECURITY_LEVEL=${QUANTUM_SECURITY_LEVEL:-medium}
      
      # Performance and scaling
      - ENABLE_OPTIMIZATION=${ENABLE_OPTIMIZATION:-true}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - ENABLE_CACHING=${ENABLE_CACHING:-true}
      - MAX_WORKERS=${MAX_WORKERS:-16}
      - MIN_WORKERS=${MIN_WORKERS:-4}
      
      # Security settings
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - ENABLE_SECURITY_HEADERS=${ENABLE_SECURITY_HEADERS:-true}
      - ENABLE_CORS=${ENABLE_CORS:-false}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-}
      
      # Compliance settings
      - COMPLIANCE_STANDARDS=${COMPLIANCE_STANDARDS:-gdpr,soc2,nist_csf}
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-2555}
      - ENABLE_AUDIT_LOGGING=${ENABLE_AUDIT_LOGGING:-true}
      - PRIVACY_MODE=${PRIVACY_MODE:-strict}
      
      # Database (if using persistent storage)
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/quantum_tasks.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Monitoring and observability
      - METRICS_ENDPOINT=${METRICS_ENDPOINT:-/metrics}
      - HEALTH_ENDPOINT=${HEALTH_ENDPOINT:-/health}
      - ENABLE_PROMETHEUS=${ENABLE_PROMETHEUS:-true}
      - JAEGER_AGENT_HOST=${JAEGER_AGENT_HOST:-jaeger}
      - JAEGER_AGENT_PORT=${JAEGER_AGENT_PORT:-6831}
      
    volumes:
      - quantum_data:/app/data
      - quantum_logs:/app/logs
      - quantum_cache:/app/cache
    networks:
      - quantum_network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.quantum-api.rule=Host(`${QUANTUM_DOMAIN:-localhost}`)"
      - "traefik.http.routers.quantum-api.entrypoints=websecure"
      - "traefik.http.routers.quantum-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.quantum-api.loadbalancer.server.port=8080"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_DATABASES=16
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - quantum_network
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-quantum_tasks}
      - POSTGRES_USER=${POSTGRES_USER:-quantum_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-quantum_secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-quantum-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quantum_user} -d ${POSTGRES_DB:-quantum_tasks}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - quantum_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-quantum_admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-quantum_secret_key_change_me}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - quantum_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger_data:/tmp
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - quantum_network
    depends_on:
      - quantum-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: quantum-fluentd
    restart: unless-stopped
    ports:
      - "${FLUENTD_PORT:-24224}:24224"
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/fluentd/log
      - quantum_logs:/app/logs:ro
    networks:
      - quantum_network
    depends_on:
      - elasticsearch
    environment:
      - FLUENTD_CONF=fluent.conf

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: quantum-elasticsearch
    restart: unless-stopped
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - quantum_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: quantum-kibana
    restart: unless-stopped
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=${KIBANA_SERVER_NAME:-quantum-kibana}
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - quantum_network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security scanner for continuous security monitoring
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile.security
    container_name: quantum-security-scanner
    restart: unless-stopped
    environment:
      - SCAN_INTERVAL=${SECURITY_SCAN_INTERVAL:-3600}
      - TARGET_API_URL=http://quantum-api:8080
      - SECURITY_LEVEL=${QUANTUM_SECURITY_LEVEL:-medium}
    volumes:
      - security_reports:/app/reports
    networks:
      - quantum_network
    depends_on:
      - quantum-api

volumes:
  quantum_data:
    driver: local
  quantum_logs:
    driver: local
  quantum_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local
  elasticsearch_data:
    driver: local
  kibana_data:
    driver: local
  security_reports:
    driver: local

networks:
  quantum_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16