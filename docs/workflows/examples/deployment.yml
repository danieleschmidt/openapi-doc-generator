# Deployment Workflow for Multiple Environments
# File: .github/workflows/deployment.yml

name: Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.example.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          # Update deployment with new image
          kubectl set image deployment/openapi-doc-generator \
            openapi-doc-generator=${{ needs.build-and-push.outputs.image-tag }} \
            -n staging

          # Wait for rollout to complete
          kubectl rollout status deployment/openapi-doc-generator -n staging --timeout=300s

      - name: Run health checks
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=openapi-doc-generator -n staging --timeout=300s
          
          # Test health endpoint
          STAGING_URL=$(kubectl get service openapi-doc-generator -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f "http://$STAGING_URL/health" || exit 1

      - name: Run smoke tests
        run: |
          # Run basic functionality tests against staging
          pytest tests/integration/test_staging_smoke.py \
            --staging-url="$STAGING_URL" \
            --junit-xml=staging-smoke-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: staging-test-results
          path: staging-smoke-results.xml

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://staging-api.example.com',
              description: 'Staging deployment successful'
            });

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Approve production deployment
        uses: trstringer/manual-approval@v1
        if: github.event_name != 'workflow_dispatch'
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Request
            
            **Version:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            **Staging Tests:** ✅ Passed
            **Security Scan:** ✅ No critical vulnerabilities
            
            Please review and approve this production deployment.

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create deployment backup
        run: |
          # Backup current deployment configuration
          kubectl get deployment openapi-doc-generator -n production -o yaml > deployment-backup.yaml
          
          # Upload backup
          aws s3 cp deployment-backup.yaml s3://deployment-backups/$(date +%Y%m%d-%H%M%S)/

      - name: Deploy to production
        run: |
          # Blue-green deployment strategy
          # 1. Deploy new version alongside current
          kubectl apply -f k8s/production/blue-green-deployment.yaml
          
          # 2. Wait for new deployment to be ready
          kubectl rollout status deployment/openapi-doc-generator-green -n production --timeout=600s
          
          # 3. Run health checks on green deployment
          kubectl wait --for=condition=ready pod -l app=openapi-doc-generator,version=green -n production --timeout=300s
          
          # 4. Switch traffic to green deployment
          kubectl patch service openapi-doc-generator -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # 5. Wait and verify
          sleep 30
          
          # 6. Scale down blue deployment
          kubectl scale deployment openapi-doc-generator-blue --replicas=0 -n production

      - name: Run production health checks
        run: |
          # Comprehensive health checks
          PROD_URL=$(kubectl get service openapi-doc-generator -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health endpoint
          curl -f "https://$PROD_URL/health" || exit 1
          
          # Metrics endpoint
          curl -f "https://$PROD_URL/metrics" || exit 1
          
          # Basic functionality test
          curl -f "https://$PROD_URL/api/version" || exit 1

      - name: Run production acceptance tests
        run: |
          pytest tests/integration/test_production_acceptance.py \
            --production-url="$PROD_URL" \
            --junit-xml=production-acceptance-results.xml

      - name: Monitor deployment
        run: |
          # Monitor error rates and response times for 10 minutes
          python scripts/monitor_deployment.py \
            --duration 600 \
            --prometheus-url "${{ secrets.PROMETHEUS_URL }}" \
            --alert-threshold 0.05

      - name: Update deployment status
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://api.example.com',
              description: 'Production deployment successful'
            });

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          
          # Switch traffic back to blue deployment
          kubectl patch service openapi-doc-generator -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Scale up blue deployment
          kubectl scale deployment openapi-doc-generator-blue --replicas=3 -n production
          
          # Remove failed green deployment
          kubectl delete deployment openapi-doc-generator-green -n production

      - name: Send notifications
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const message = status === 'success' 
              ? '✅ Production deployment successful'
              : '❌ Production deployment failed';
              
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Deployment ${status === 'success' ? 'Successful' : 'Failed'}`,
              body: `
                ${message}
                
                **Version:** ${{ github.ref_name }}
                **Commit:** ${{ github.sha }}
                **Workflow:** ${context.workflow}
                **Run:** ${context.runNumber}
                
                ${status === 'failure' ? 'Please investigate the failure and retry deployment.' : 'All systems operational.'}
              `,
              labels: ['deployment', status === 'success' ? 'success' : 'failure']
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          # Keep only the last 10 images
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/${{ env.IMAGE_NAME }}/versions \
            --field package_type=container \
            --field state=active \
            | jq '.[10:] | .[] | .id' \
            | xargs -I {} gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /user/packages/container/${{ env.IMAGE_NAME }}/versions/{}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}