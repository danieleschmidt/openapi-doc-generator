# Advanced Security Scanning Template
# Place this file as .github/workflows/security.yml

name: Advanced Security Scanning & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly comprehensive security scan
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      deep_scan:
        description: 'Run deep security analysis'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # For better analysis context
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -e .[dev]
      
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt
        continue-on-error: true
      
      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true
      
      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/
          semgrep --config=auto src/
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Dependency Vulnerability Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      
      - name: Audit dependencies
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --desc
      
      - name: Check for known vulnerabilities
        run: |
          pip install -e .
          pip-audit --format=json --output=installed-audit.json
        continue-on-error: true
      
      - name: Upload audit reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit
          path: |
            pip-audit-report.json
            installed-audit.json

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t security-scan:latest .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan
      
      - name: Install detect-secrets
        run: |
          pip install detect-secrets
      
      - name: Run secrets detection
        run: |
          detect-secrets scan --all-files --force-use-all-plugins \
            --baseline .secrets.baseline
      
      - name: Verify secrets baseline
        run: |
          detect-secrets audit .secrets.baseline
        continue-on-error: true

  # License Compliance
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck
          pip install -e .
      
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=plain-vertical
      
      - name: Validate license compatibility
        run: |
          # Check for GPL and other restrictive licenses
          pip-licenses --format=json | \
            python -c "
import json, sys
licenses = json.load(sys.stdin)
restricted = ['GPL', 'AGPL', 'LGPL']
found = []
for pkg in licenses:
    for r in restricted:
        if r in pkg.get('License', '').upper():
            found.append(f\"{pkg['Name']}: {pkg['License']}\")
if found:
    print('Restricted licenses found:')
    for f in found:
        print(f'  {f}')
    sys.exit(1)
else:
    print('No restricted licenses found')
"
      
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  # Deep Security Analysis (Optional)
  deep-security-scan:
    name: Deep Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event.inputs.deep_scan == 'true' || github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install advanced security tools
        run: |
          python -m pip install --upgrade pip
          pip install dlint vulture
          pip install -e .[dev]
      
      - name: Run dlint (security linting)
        run: |
          dlint src/ --json > dlint-report.json
          dlint src/
        continue-on-error: true
      
      - name: Run vulture (dead code detection)
        run: |
          vulture src/ --json > vulture-report.json
          vulture src/
        continue-on-error: true
      
      - name: Advanced static analysis
        run: |
          # Additional comprehensive scans
          find src/ -name "*.py" -exec grep -l "eval\|exec\|__import__" {} \;
          find src/ -name "*.py" -exec grep -l "pickle\|subprocess\|os\.system" {} \;
        continue-on-error: true

  # Security Report Compilation
  compile-security-report:
    name: Compile Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-security, container-security, secrets-detection, license-compliance]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/
      
      - name: Compile comprehensive report
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary
          
          ## Scan Results
          
          - **SAST Analysis**: ${{ needs.sast-analysis.result }}
          - **Dependency Security**: ${{ needs.dependency-security.result }}
          - **Container Security**: ${{ needs.container-security.result }}
          - **Secrets Detection**: ${{ needs.secrets-detection.result }}
          - **License Compliance**: ${{ needs.license-compliance.result }}
          
          ## Report Files
          
          All detailed reports are available in the artifacts section.
          
          ## Action Required
          
          Review any failed checks and address security issues before deployment.
          EOF
      
      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}`
            });

  # Compliance Validation
  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check security documentation
        run: |
          # Verify required security files exist
          files=("SECURITY.md" "CODE_OF_CONDUCT.md" "CONTRIBUTING.md")
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Missing required file: $file"
              exit 1
            fi
          done
      
      - name: Validate security configuration
        run: |
          # Check for security-related configurations
          if [ ! -f ".secrets.baseline" ]; then
            echo "::warning::No secrets baseline found"
          fi
          
          if [ ! -f "pyproject.toml" ]; then
            echo "::error::Missing pyproject.toml"
            exit 1
          fi
      
      - name: Check branch protection compliance
        run: |
          echo "::notice::Manual verification required for branch protection rules"
          echo "Ensure main branch has protection rules enabled"