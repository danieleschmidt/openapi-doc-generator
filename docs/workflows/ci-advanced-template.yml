# Advanced CI/CD Workflow Template
# Place this file as .github/workflows/ci.yml

name: Continuous Integration & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly dependency audit
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # Quality Gates
  quality-gates:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Code formatting check
        run: make format-check
      
      - name: Linting
        run: make lint
      
      - name: Type checking
        run: make type-check
      
      - name: Security scanning
        run: make security-scan
        continue-on-error: false
      
      - name: Dependency vulnerability scan
        run: make security-audit
        continue-on-error: false

  # Comprehensive Testing Matrix  
  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run unit tests
        run: make test-unit
      
      - name: Run integration tests
        run: make test-integration
      
      - name: Generate coverage report
        run: make coverage-report
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}

  # Performance & Security Testing
  advanced-testing:
    name: Performance & Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-gates]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Performance benchmarks
        run: make benchmark
      
      - name: Security tests
        run: make test-security
      
      - name: Load tests
        run: make test-load
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  # Container Testing
  container-tests:
    name: Container & Docker Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-gates]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t openapi-doc-generator:test .
      
      - name: Test Docker image
        run: |
          docker run --rm openapi-doc-generator:test \
            python -c "import openapi_doc_generator; print('Import successful')"
      
      - name: Container security scan
        uses: anchore/scan-action@v3
        with:
          image: openapi-doc-generator:test
          fail-build: true
          severity-cutoff: high

  # Dependency Management
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0

  # Documentation & Examples
  documentation-tests:
    name: Documentation & Examples
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Test example applications
        run: make test-examples
      
      - name: Validate documentation links
        run: make docs-validate
      
      - name: Test CLI documentation
        run: |
          python -m openapi_doc_generator --help
          python -m openapi_doc_generator --version

# Notification and Status Updates
  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-gates, test-matrix, advanced-testing, container-tests, documentation-tests]
    if: always()
    
    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: echo "::error::CI pipeline failed - check logs for details"
      
      - name: Success notification
        if: needs.quality-gates.result == 'success' && needs.test-matrix.result == 'success'
        run: echo "::notice::All CI checks passed successfully"